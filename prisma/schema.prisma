// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id          String     @id @default(uuid())
  email       String     @unique
  username    String     @unique
  firstName   String
  lastName    String
  password    String
  image       String     @default("assets/profile/default.jpg")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  role        Role?
  roleName    RoleSelect @default(PEMBELI)
  birthDay    DateTime   @default(now())
  gender      Gender     @default(UNKNOWN)
  phone       String     @default("")
  website     String     @default("")
  city        String     @default("")
  job         String[]   @default([""])
  socialMedia String     @default("")
  description String     @default("")
}

enum RoleSelect {
  ADMIN
  PEMBELI
  PENJUAL
  DESAINER
  TUKANG
}

enum Gender {
  UNKNOWN
  MALE
  FEMALE
}

enum Status {
  PENDING
  BUILDING
  FINISHED
  CANCELLED
}

enum TransctionType {
  BELI
  SEWA
  DESAIN
  BUILD
}

model Role {
  id         String   @id @default(uuid())
  user       Users    @relation(fields: [usersId], references: [id])
  usersId    String   @unique
  role       String
  Pembeli    Pembeli  @relation(fields: [pembeliId], references: [id])
  pembeliId  String   @unique
  Penjual    Penjual  @relation(fields: [penjualId], references: [id])
  penjualId  String   @unique
  Desainer   Desainer @relation(fields: [desainerId], references: [id])
  desainerId String   @unique
  Tukang     Tukang   @relation(fields: [tukangId], references: [id])
  tukangId   String   @unique
}

model Transaksi {
  id         String         @id @default(uuid())
  id_user    String
  harga      Decimal
  type       TransctionType
  quantity   Int
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  Pembeli    Pembeli        @relation(fields: [pembeliId], references: [id])
  pembeliId  String
  Penjual    Penjual        @relation(fields: [penjualId], references: [id])
  penjualId  String
  properti   Properti?      @relation(fields: [propertiId], references: [id])
  propertiId String
  desain     Desain?        @relation(fields: [desainId], references: [id])
  desainId   String
}

model Pembeli {
  id               String      @id @default(uuid())
  keranjang        String[]
  wishlist         String[]
  pesanan_properti Properti[]
  pesanan_desain   Desain[]
  Role             Role?
  Transaksi        Transaksi[]
}

model Desainer {
  id          String        @id @default(uuid())
  desain      Desain[]
  mengerjakan Mengerjakan[]
  Role        Role?
}

model Tukang {
  id          String        @id @default(uuid())
  desain      Desain[]
  mengerjakan Mengerjakan[]
  Role        Role?
}

model Penjual {
  id        String      @id @default(uuid())
  transaksi Transaksi[]
  Role      Role?
  Properti  Properti[]
}

model Mengerjakan {
  id         String    @id @default(uuid())
  username   String
  id_desain  String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Desainer   Desainer? @relation(fields: [desainerId], references: [id])
  desainerId String?
  Tukang     Tukang?   @relation(fields: [tukangId], references: [id])
  tukangId   String?
}

model Properti {
  id             String          @id @default(uuid())
  namaProduk     String
  deskripsi      String
  foto           String[]
  sarana         String[]
  posisi         Decimal[]
  penjual        Penjual         @relation(fields: [penjualId], references: [id])
  penjualId      String          @unique
  alamat         Alamat?
  Detail_product Detail_product?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  Pembeli        Pembeli?        @relation(fields: [pembeliId], references: [id])
  pembeliId      String?
  Rating         Rating[]
  Liked          Liked?          @relation(fields: [likedId], references: [id])
  likedId        String?
  Transaksi      Transaksi[]
}

model Detail_product {
  id                String   @id @default(uuid())
  tipe              String
  pengembang        String
  sertifikat        String
  tahun             Int
  harga             Decimal
  hargaSewa         Decimal
  jumlah_kamar      Int
  jumlah_kamarMandi Int
  luas_product      Decimal
  foto              String[]
  Properti          Properti @relation(fields: [propertiId], references: [id])
  propertiId        String   @unique
}

model Desain {
  id          String         @id @default(uuid())
  nama_desain String
  deskripsi   String
  foto        String[]
  Detail      Detail_desain?
  id_rating   String
  harga       Decimal
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  Pembeli     Pembeli?       @relation(fields: [pembeliId], references: [id])
  pembeliId   String?
  Rating      Rating[]
  Desainer    Desainer?      @relation(fields: [desainerId], references: [id])
  desainerId  String?
  Tukang      Tukang?        @relation(fields: [tukangId], references: [id])
  tukangId    String?
  Liked       Liked?         @relation(fields: [likedId], references: [id])
  likedId     String?
  Transaksi   Transaksi[]
}

model Detail_desain {
  id                String  @id @default(uuid())
  harga             Decimal
  username          String
  tipe              String
  sertifikat        String
  luas_desain       Decimal
  jumlah_kamar      Int
  jumlah_kamarMandi Int
  desain            Desain  @relation(fields: [desainId], references: [id])
  desainId          String  @unique
}

model Rating {
  id         String    @id @default(uuid())
  username   String
  rating     Int
  komentar   String
  properti   Properti? @relation(fields: [propertiId], references: [id])
  desain     Desain?   @relation(fields: [desainId], references: [id])
  propertiId String?
  desainId   String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Provinsi {
  id            Int             @id @default(autoincrement())
  kabupatenKota KabupatenKota[]
  namaProvinsi  String
  latitude      Decimal
  longitude     Decimal
}

model KabupatenKota {
  id         Int      @id @default(autoincrement())
  nama       String
  provinsi   Provinsi @relation(fields: [provinsiId], references: [id])
  provinsiId Int
  latitude   Decimal
  longitude  Decimal
}

model Alamat {
  id_alamat     String   @id @default(uuid())
  provinsi      String
  kabupatenKota String
  kecamatan     String
  kelurahan     String
  kode_pos      Int
  jalan         String
  Properti      Properti @relation(fields: [propertiId], references: [id])
  propertiId    String   @unique
}

model ListChat {
  id                 String   @id @default(uuid())
  id_user            String
  id_userDestination String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  Chat               Chat[]
}

model Chat {
  id         String     @id @default(uuid())
  id_user    String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  ListChat   ListChat   @relation(fields: [listChatId], references: [id])
  listChatId String
  Messages   Messages[]
}

model Messages {
  id        String   @id @default(uuid())
  id_user   String
  pesan     String
  image     String
  createdAt DateTime @default(now())
  Chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
}

model Liked {
  id       String     @id @default(uuid())
  id_user  String
  properti Properti[]
  desain   Desain[]
}
